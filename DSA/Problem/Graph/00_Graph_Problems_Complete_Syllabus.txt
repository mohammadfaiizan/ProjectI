═══════════════════════════════════════════════════════════════════════════════════
                        🏗️ COMPREHENSIVE GRAPH THEORY SYLLABUS 🏗️
                           Complete Mastery Path with 200+ Problems
═══════════════════════════════════════════════════════════════════════════════════

📚 **OVERVIEW**
This syllabus covers all essential graph algorithms and techniques from basic traversals 
to advanced network flow and competitive programming problems. Each category builds 
upon previous concepts while introducing new algorithmic paradigms.

🎯 **LEARNING OBJECTIVES**
- Master fundamental graph representations and traversal algorithms
- Understand shortest path algorithms and their applications
- Implement tree algorithms and spanning tree techniques
- Solve topological sorting and cycle detection problems
- Apply graph coloring and matching algorithms
- Handle network flow and min-cut problems
- Tackle advanced competitive programming graph problems

══════════════════════════════════════════════════════════════════════════════════

📊 **SYLLABUS STRUCTURE - 15 CATEGORIES, 200+ PROBLEMS**

01. Graph Fundamentals & Representations (15 problems)
02. Depth-First Search (DFS) (18 problems)
03. Breadth-First Search (BFS) (16 problems)
04. Union-Find (Disjoint Set Union) (14 problems)
05. Shortest Path Algorithms (20 problems)
06. Minimum Spanning Tree (MST) (12 problems)
07. Topological Sort & DAG Problems (15 problems)
08. Strongly Connected Components (SCC) (10 problems)
09. Bipartite Graphs & Matching (12 problems)
10. Graph Coloring & Independent Set (8 problems)
11. Network Flow & Min-Cut (15 problems)
12. Tree Algorithms & Special Trees (18 problems)
13. Advanced Graph Algorithms (12 problems)
14. Competitive Programming Graphs (16 problems)
15. System Design & Graph Applications (8 problems)

══════════════════════════════════════════════════════════════════════════════════

🔰 **CATEGORY 1: GRAPH FUNDAMENTALS & REPRESENTATIONS** (15 Problems)

**📋 Core Concepts:**
- Adjacency Matrix vs Adjacency List
- Edge List Representation
- Weighted vs Unweighted Graphs
- Directed vs Undirected Graphs
- Graph Input/Output Handling
- Basic Graph Properties

**🎯 Essential Problems:**

**Easy (5 problems):**
1. 997_Find_the_Town_Judge.py
2. 1791_Find_Center_of_Star_Graph.py
3. 1557_Minimum_Number_of_Vertices_to_Reach_All_Nodes.py
4. 1436_Destination_City.py
5. Graph_Representation_Converter.py

**Medium (7 problems):**
6. 133_Clone_Graph.py
7. 1615_Maximal_Network_Rank.py
8. 1443_Minimum_Time_to_Collect_All_Apples.py
9. 841_Keys_and_Rooms.py
10. 1319_Number_of_Operations_to_Make_Network_Connected.py
11. 1267_Count_Servers_that_Communicate.py
12. Graph_Validation_Problems.py

**Hard (3 problems):**
13. 1568_Minimum_Number_of_Days_to_Disconnect_Island.py
14. Advanced_Graph_Construction.py
15. Graph_Isomorphism_Detection.py

══════════════════════════════════════════════════════════════════════════════════

🌊 **CATEGORY 2: DEPTH-FIRST SEARCH (DFS)** (25 Problems)

**📋 Core Concepts:**
- Recursive vs Iterative DFS
- DFS Tree and Back Edges
- Connected Components
- Cycle Detection
- Path Finding and Backtracking
- DFS on Different Graph Types
- Grid-based DFS Problems
- Island and Region Problems

**🎯 Essential Problems:**

**Easy (9 problems):**
1. 200_Number_of_Islands.py ⭐ (Classic Island Problem)
2. 695_Max_Area_of_Island.py ⭐ (Island Area Calculation)
3. 733_Flood_Fill.py ⭐ (Classic Flood Fill)
4. 463_Island_Perimeter.py ⭐ (Island Boundary)
5. 1254_Number_of_Closed_Islands.py ⭐ (Closed Island Variant)
6. 1971_Find_if_Path_Exists_in_Graph.py
7. 1559_Detect_Cycles_in_2D_Grid.py
8. 1466_Reorder_Routes_to_Make_All_Paths_Lead_to_the_City_Zero.py
9. 598_Range_Addition_II.py

**Medium (12 problems):**
10. 130_Surrounded_Regions.py ⭐ (Region Capture)
11. 417_Pacific_Atlantic_Water_Flow.py ⭐ (Water Flow Grid)
12. 694_Number_of_Distinct_Islands.py ⭐ (Island Shape Recognition)
13. 1020_Number_of_Enclaves.py ⭐ (Enclosed Regions)
14. 934_Shortest_Bridge.py ⭐ (Island Connection)
15. 547_Number_of_Provinces.py ⭐ (Connected Components)
16. 1391_Check_if_There_is_a_Valid_Path_in_a_Grid.py
17. 1905_Count_Sub_Islands.py ⭐ (Island Containment)
18. 79_Word_Search.py ⭐ (Grid Path Search)
19. 1302_Deepest_Leaves_Sum.py
20. 1376_Time_Needed_to_Inform_All_Employees.py
21. 1111_Maximum_Nesting_Depth_of_Two_Valid_Parentheses_Strings.py

**Hard (4 problems):**
22. 212_Word_Search_II.py
23. 1192_Critical_Connections_in_a_Network.py
24. 827_Making_A_Large_Island.py
25. 1235_Maximum_Profit_Job_Scheduling.py

══════════════════════════════════════════════════════════════════════════════════

🌪️ **CATEGORY 3: BREADTH-FIRST SEARCH (BFS)** (22 Problems)

**📋 Core Concepts:**
- Level-order Traversal
- Shortest Path in Unweighted Graphs
- Multi-source BFS
- 0-1 BFS
- Bidirectional BFS
- BFS State Space Search
- Grid-based BFS Problems
- Level-by-Level Processing
- Distance and Time-based Problems

**🎯 Essential Problems:**

**Easy (8 problems):**
1. 994_Rotting_Oranges.py ⭐ (Classic Multi-source BFS)
2. 1926_Nearest_Exit_from_Entrance_in_Maze.py
3. 1162_As_Far_from_Land_as_Possible.py
4. 1091_Shortest_Path_in_Binary_Matrix.py
5. 1034_Coloring_A_Border.py
6. 1784_Check_if_Binary_String_Has_at_Most_One_Segment_of_Ones.py
7. 690_Employee_Importance.py
8. 1137_N_th_Tribonacci_Number.py

**Medium (11 problems):**
9. 542_01_Matrix.py ⭐ (Multi-source BFS Classic)
10. 1306_Jump_Game_III.py
11. 909_Snakes_and_Ladders.py
12. 1765_Map_of_Highest_Peak.py
13. 433_Minimum_Genetic_Mutation.py
14. 127_Word_Ladder.py ⭐ (BFS String Transformation)
15. 752_Open_the_Lock.py
16. 1129_Shortest_Path_with_Alternating_Colors.py
17. 1305_All_Elements_in_Two_Binary_Search_Trees.py
18. 1368_Minimum_Cost_to_Make_at_Least_One_Valid_Path_in_a_Grid.py
19. 1730_Shortest_Path_to_Get_Food.py

**Hard (3 problems):**
20. 126_Word_Ladder_II.py ⭐ (BFS with Path Reconstruction)
21. 815_Bus_Routes.py
22. 1263_Minimum_Moves_to_Move_a_Box_to_Their_Target_Location.py

══════════════════════════════════════════════════════════════════════════════════

🔗 **CATEGORY 4: UNION-FIND (DISJOINT SET UNION)** (14 Problems)

**📋 Core Concepts:**
- Union by Rank/Size
- Path Compression
- Dynamic Connectivity
- Kruskal's Algorithm Foundation
- Online vs Offline Queries
- Weighted Union-Find

**🎯 Essential Problems:**

**Easy (4 problems):**
1. 990_Satisfiability_of_Equality_Equations.py
2. 1971_Find_if_Path_Exists_in_Graph.py
3. 684_Redundant_Connection.py
4. 721_Accounts_Merge.py

**Medium (7 problems):**
5. 547_Number_of_Provinces.py
6. 1202_Smallest_String_With_Swaps.py
7. 685_Redundant_Connection_II.py
8. 1061_Lexicographically_Smallest_Equivalent_String.py
9. 1584_Min_Cost_to_Connect_All_Points.py
10. 1722_Minimize_Hamming_Distance_After_Swap_Operations.py
11. 959_Regions_Cut_By_Slashes.py

**Hard (3 problems):**
12. 765_Couples_Holding_Hands.py
13. 952_Largest_Component_Size_by_Common_Factor.py
14. 1697_Checking_Existence_of_Edge_Length_Limited_Paths.py

══════════════════════════════════════════════════════════════════════════════════

🛣️ **CATEGORY 5: SHORTEST PATH ALGORITHMS** (20 Problems)

**📋 Core Concepts:**
- Dijkstra's Algorithm
- Bellman-Ford Algorithm
- Floyd-Warshall Algorithm
- A* Algorithm
- Single Source vs All Pairs
- Negative Weights and Cycles

**🎯 Essential Problems:**

**Easy (6 problems):**
1. 1337_The_K_Weakest_Rows_in_a_Matrix.py
2. 1514_Path_with_Maximum_Probability.py
3. 1311_Get_Watched_Videos_by_Your_Friends.py
4. 1631_Path_With_Minimum_Effort.py
5. 1928_Minimum_Cost_to_Reach_Destination_in_Time.py
6. Easy_Shortest_Path_Problems.py

**Medium (10 problems):**
7. 743_Network_Delay_Time.py
8. 787_Cheapest_Flights_Within_K_Stops.py
9. 1976_Number_of_Ways_to_Arrive_at_Destination.py
10. 1368_Minimum_Cost_to_Make_at_Least_One_Valid_Path_in_a_Grid.py
11. 1102_Path_With_Maximum_Minimum_Value.py
12. 1786_Number_of_Restricted_Paths_From_First_to_Last_Node.py
13. 1334_Find_the_City_With_the_Smallest_Number_of_Neighbors_at_a_Threshold_Distance.py
14. 1293_Shortest_Path_in_a_Grid_with_Obstacles_Elimination.py
15. 882_Reachable_Nodes_In_Subdivided_Graph.py
16. 1066_Campus_Bikes_II.py

**Hard (4 problems):**
17. 1462_Course_Schedule_IV.py
18. 1203_Sort_Items_by_Groups_Respecting_Dependencies.py
19. 2045_Second_Minimum_Time_to_Reach_Destination.py
20. Advanced_Shortest_Path_Algorithms.py

══════════════════════════════════════════════════════════════════════════════════

🌳 **CATEGORY 6: MINIMUM SPANNING TREE (MST)** (12 Problems)

**📋 Core Concepts:**
- Kruskal's Algorithm
- Prim's Algorithm
- Borůvka's Algorithm
- MST Properties and Cut Property
- Second MST and MST Variants
- Steiner Tree Problem

**🎯 Essential Problems:**

**Easy (3 problems):**
1. 1584_Min_Cost_to_Connect_All_Points.py
2. MST_Basic_Implementation.py
3. 1135_Connecting_Cities_With_Minimum_Cost.py

**Medium (6 problems):**
4. 1489_Find_Critical_and_Pseudo_Critical_Edges_in_MST.py
5. 1167_Minimum_Cost_to_Connect_Sticks.py
6. 1168_Optimize_Water_Distribution_in_a_Village.py
7. 1597_Build_Binary_Expression_Tree_From_Infix_Expression.py
8. MST_with_Constraints.py
9. Dynamic_MST_Problems.py

**Hard (3 problems):**
10. 1579_Remove_Max_Number_of_Edges_to_Keep_Graph_Fully_Traversable.py
11. Second_Minimum_Spanning_Tree.py
12. Steiner_Tree_Approximation.py

══════════════════════════════════════════════════════════════════════════════════

📊 **CATEGORY 7: TOPOLOGICAL SORT & DAG PROBLEMS** (15 Problems)

**📋 Core Concepts:**
- Kahn's Algorithm (BFS-based)
- DFS-based Topological Sort
- Cycle Detection in Directed Graphs
- Lexicographically Smallest Topological Order
- DAG Shortest/Longest Paths
- DAG DP Problems

**🎯 Essential Problems:**

**Easy (4 problems):**
1. 207_Course_Schedule.py
2. 210_Course_Schedule_II.py
3. 1136_Parallel_Courses.py
4. 1059_All_Paths_from_Source_Lead_to_Destination.py

**Medium (8 problems):**
5. 269_Alien_Dictionary.py
6. 802_Find_Eventual_Safe_States.py
7. 1857_Largest_Color_Value_in_a_Directed_Graph.py
8. 1462_Course_Schedule_IV.py
9. 444_Sequence_Reconstruction.py
10. 1203_Sort_Items_by_Groups_Respecting_Dependencies.py
11. 310_Minimum_Height_Trees.py
12. 1591_Strange_Printer_II.py

**Hard (3 problems):**
13. 329_Longest_Increasing_Path_in_a_Matrix.py
14. 1494_Parallel_Courses_II.py
15. 2392_Build_a_Matrix_With_Conditions.py

══════════════════════════════════════════════════════════════════════════════════

🔄 **CATEGORY 8: STRONGLY CONNECTED COMPONENTS (SCC)** (10 Problems)

**📋 Core Concepts:**
- Kosaraju's Algorithm
- Tarjan's Algorithm
- Strongly Connected Components
- Condensation Graph
- Bridge Finding (Tarjan's Bridge Algorithm)
- Articulation Points

**🎯 Essential Problems:**

**Easy (2 problems):**
1. SCC_Basic_Implementation.py
2. 1192_Critical_Connections_in_a_Network.py

**Medium (5 problems):**
3. 1568_Minimum_Number_of_Days_to_Disconnect_Island.py
4. 928_Minimize_Malware_Spread_II.py
5. Articulation_Points_and_Bridges.py
6. 1761_Minimum_Degree_of_a_Connected_Trio_in_a_Graph.py
7. SCC_Applications.py

**Hard (3 problems):**
8. 1489_Find_Critical_and_Pseudo_Critical_Edges_in_MST.py
9. 2127_Maximum_Employees_to_Be_Invited_to_a_Meeting.py
10. Advanced_SCC_Problems.py

══════════════════════════════════════════════════════════════════════════════════

⚖️ **CATEGORY 9: BIPARTITE GRAPHS & MATCHING** (12 Problems)

**📋 Core Concepts:**
- Bipartite Graph Detection
- Maximum Bipartite Matching
- Hungarian Algorithm
- Hall's Marriage Theorem
- König's Theorem
- Minimum Vertex Cover in Bipartite Graphs

**🎯 Essential Problems:**

**Easy (3 problems):**
1. 785_Is_Graph_Bipartite.py
2. 886_Possible_Bipartition.py
3. Bipartite_Detection_Algorithms.py

**Medium (6 problems):**
4. 1066_Campus_Bikes_II.py
5. 1349_Maximum_Students_Taking_Exam.py
6. 1820_Maximum_Number_of_Accepted_Invitations.py
7. Maximum_Bipartite_Matching.py
8. 1947_Maximum_Compatibility_Score_Sum.py
9. Hungarian_Algorithm_Implementation.py

**Hard (3 problems):**
10. 1595_Minimum_Cost_to_Connect_Two_Groups_of_Points.py
11. 2172_Maximum_AND_Sum_of_Array.py
12. Advanced_Matching_Problems.py

══════════════════════════════════════════════════════════════════════════════════

🎨 **CATEGORY 10: GRAPH COLORING & INDEPENDENT SET** (8 Problems)

**📋 Core Concepts:**
- Graph Coloring Problem
- Chromatic Number
- Independent Set Problem
- Vertex Cover Problem
- Clique Problem
- Greedy Coloring Algorithms

**🎯 Essential Problems:**

**Easy (2 problems):**
1. Graph_Coloring_Basic.py
2. 1042_Flower_Planting_With_No_Adjacent.py

**Medium (4 problems):**
3. 1557_Minimum_Number_of_Vertices_to_Reach_All_Nodes.py
4. Independent_Set_Algorithms.py
5. Vertex_Cover_Approximation.py
6. 1494_Parallel_Courses_II.py

**Hard (2 problems):**
7. Maximum_Independent_Set.py
8. Chromatic_Number_Algorithms.py

══════════════════════════════════════════════════════════════════════════════════

🌊 **CATEGORY 11: NETWORK FLOW & MIN-CUT** (15 Problems)

**📋 Core Concepts:**
- Ford-Fulkerson Algorithm
- Edmonds-Karp Algorithm
- Dinic's Algorithm
- Push-Relabel Algorithm
- Min-Cut Max-Flow Theorem
- Multi-commodity Flow

**🎯 Essential Problems:**

**Easy (3 problems):**
1. Maximum_Flow_Basic.py
2. 1376_Time_Needed_to_Inform_All_Employees.py
3. Network_Flow_Fundamentals.py

**Medium (8 problems):**
4. 1494_Parallel_Courses_II.py
5. 1617_Count_Subtrees_With_Max_Distance_Between_Cities.py
6. Min_Cut_Algorithms.py
7. 1595_Minimum_Cost_to_Connect_Two_Groups_of_Points.py
8. 1559_Detect_Cycles_in_2D_Grid.py
9. Project_Selection_Problem.py
10. Multi_Source_Multi_Sink_Flow.py
11. Minimum_Cost_Maximum_Flow.py

**Hard (4 problems):**
12. 2123_Minimum_Operations_to_Remove_Adjacent_Ones_in_Matrix.py
13. Maximum_Flow_with_Lower_Bounds.py
14. Global_Min_Cut_Algorithms.py
15. Advanced_Network_Flow.py

══════════════════════════════════════════════════════════════════════════════════

🌲 **CATEGORY 12: TREE ALGORITHMS & SPECIAL TREES** (18 Problems)

**📋 Core Concepts:**
- Tree Traversals and Properties
- Lowest Common Ancestor (LCA)
- Heavy-Light Decomposition
- Centroid Decomposition
- Euler Tour Technique
- Tree Diameter and Center

**🎯 Essential Problems:**

**Easy (5 problems):**
1. 104_Maximum_Depth_of_Binary_Tree.py
2. 543_Diameter_of_Binary_Tree.py
3. 226_Invert_Binary_Tree.py
4. 1022_Sum_of_Root_To_Leaf_Binary_Numbers.py
5. Tree_Basic_Operations.py

**Medium (10 problems):**
6. 236_Lowest_Common_Ancestor_of_a_Binary_Tree.py
7. 1245_Tree_Diameter.py
8. 310_Minimum_Height_Trees.py
9. 863_All_Nodes_Distance_K_in_Binary_Tree.py
10. 1319_Number_of_Operations_to_Make_Network_Connected.py
11. 1123_Lowest_Common_Ancestor_of_Deepest_Leaves.py
12. 979_Distribute_Coins_in_Binary_Tree.py
13. Heavy_Light_Decomposition.py
14. Centroid_Decomposition.py
15. 1372_Longest_ZigZag_Path_in_a_Binary_Tree.py

**Hard (3 problems):**
16. 1542_Find_Longest_Awesome_Substring.py
17. Advanced_LCA_Techniques.py
18. Tree_Isomorphism.py

══════════════════════════════════════════════════════════════════════════════════

🚀 **CATEGORY 13: ADVANCED GRAPH ALGORITHMS** (12 Problems)

**📋 Core Concepts:**
- Graph Planarity Testing
- Graph Isomorphism
- Hamiltonian Path/Cycle
- Traveling Salesman Problem
- Graph Bandwidth Problem
- Expander Graphs

**🎯 Essential Problems:**

**Easy (2 problems):**
1. Graph_Planarity_Basics.py
2. Simple_Cycle_Detection.py

**Medium (6 problems):**
3. 980_Unique_Paths_III.py
4. Hamiltonian_Path_Detection.py
5. 847_Shortest_Path_Visiting_All_Nodes.py
6. Graph_Bandwidth_Problem.py
7. 1947_Maximum_Compatibility_Score_Sum.py
8. Matrix_Tree_Theorem.py

**Hard (4 problems):**
9. 943_Find_the_Shortest_Superstring.py
10. TSP_Advanced_Algorithms.py
11. Graph_Isomorphism_Advanced.py
12. Expander_Graph_Applications.py

══════════════════════════════════════════════════════════════════════════════════

🏆 **CATEGORY 14: COMPETITIVE PROGRAMMING GRAPHS** (16 Problems)

**📋 Core Concepts:**
- Contest-style Graph Problems
- Complex State Management
- Multiple Algorithm Integration
- Optimization Techniques
- Time/Space Complexity Optimization

**🎯 Essential Problems:**

**Easy (4 problems):**
1. 1791_Find_Center_of_Star_Graph.py
2. 1971_Find_if_Path_Exists_in_Graph.py
3. Contest_Graph_Basics.py
4. 997_Find_the_Town_Judge.py

**Medium (8 problems):**
5. 1615_Maximal_Network_Rank.py
6. 1761_Minimum_Degree_of_a_Connected_Trio_in_a_Graph.py
7. 2127_Maximum_Employees_to_Be_Invited_to_a_Meeting.py
8. 1377_Frog_Position_After_T_Seconds.py
9. 1928_Minimum_Cost_to_Reach_Destination_in_Time.py
10. 1697_Checking_Existence_of_Edge_Length_Limited_Paths.py
11. Contest_Optimization_Tricks.py
12. Advanced_State_Management.py

**Hard (4 problems):**
13. 2045_Second_Minimum_Time_to_Reach_Destination.py
14. 2203_Minimum_Weighted_Subgraph_With_the_Required_Paths.py
15. 2421_Number_of_Good_Paths.py
16. Contest_Masterclass_Problems.py

══════════════════════════════════════════════════════════════════════════════════

🏢 **CATEGORY 15: SYSTEM DESIGN & GRAPH APPLICATIONS** (8 Problems)

**📋 Core Concepts:**
- Social Network Analysis
- Web Graph Algorithms
- Distributed Graph Processing
- Real-world Graph Applications
- Performance Optimization
- Scalability Considerations

**🎯 Essential Problems:**

**Easy (2 problems):**
1. Social_Network_Basics.py
2. 721_Accounts_Merge.py

**Medium (4 problems):**
3. Friend_Recommendation_System.py
4. Web_Crawler_Design.py
5. Distributed_Graph_Algorithms.py
6. 1857_Largest_Color_Value_in_a_Directed_Graph.py

**Hard (2 problems):**
7. PageRank_Algorithm.py
8. Large_Scale_Graph_Processing.py

══════════════════════════════════════════════════════════════════════════════════

📈 **DIFFICULTY DISTRIBUTION**
- Easy Problems: 59 (28.5%)
- Medium Problems: 120 (58%)
- Hard Problems: 28 (13.5%)
- Total: 207 Problems

⏱️ **ESTIMATED TIMELINE**
- Beginner: 6-8 months (1-2 problems per day)
- Intermediate: 4-5 months (1-2 problems per day)
- Advanced: 2-3 months (2-3 problems per day)

🛠️ **IMPLEMENTATION STANDARDS**
For each problem, provide:
✅ Multiple solution approaches (brute force, optimal, alternative)
✅ Detailed complexity analysis (time & space)
✅ Comprehensive test cases
✅ Edge case handling
✅ Clear documentation and comments
✅ Algorithm explanation and intuition
✅ Related problems and variations

🎯 **MASTERY GOALS**
Upon completion, you will have mastered:
- All fundamental graph algorithms and data structures
- Advanced algorithmic techniques for complex graph problems
- Competitive programming graph problem-solving strategies
- Real-world applications of graph theory
- Performance optimization and scalability considerations

══════════════════════════════════════════════════════════════════════════════════

🌟 **ADDITIONAL RESOURCES**
- Algorithm visualization tools
- Graph theory textbook references
- Online judge problem links
- Community discussion forums
- Performance benchmarking tools

Happy Graph Learning! 🚀📊🌐

══════════════════════════════════════════════════════════════════════════════════
